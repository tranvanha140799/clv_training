import {
  Catch,
  RpcExceptionFilter,
  ArgumentsHost,
  ExecutionContext,
} from '@nestjs/common';
import { Observable, throwError } from 'rxjs';
import { RpcException } from '@nestjs/microservices';

// @Catch(RpcException)
// export class RPCExceptionFilter implements RpcExceptionFilter<RpcException> {
//   catch(exception: RpcException, host: ArgumentsHost): Observable<any> {
//     const ctx = host.switchToHttp();
//     const response = ctx.getResponse<Response>();
//     const request = ctx.getRequest<Request>();
//     const res: any = exception.getError();
//     const status = exception.getError();

//     // response.status(status).json({
//     //   statusCode: status,
//     //   path: request.url,
//     //   message: typeof res.message === 'object' ? res.message[0] : res.message || res,
//     // });
//     console.log(
//       'üöÄ -> file: exception.filter.ts:7 -> ExceptionFilter -> exception.getError():',
//       exception
//     );
//     console.log(
//       'üöÄ -> file: rpc-exception.filter.ts:7 -> ExceptionFilter -> host:',
//       host
//     );
//     return throwError(() => exception.stack);
//   }
// }

@Catch(RpcException)
export class RPCExceptionFilter implements RpcExceptionFilter {
  catch(exception: RpcException, context: ExecutionContext): Observable<any> {
    const response = context.switchToRpc(); // L·∫•y ƒë·ªëi t∆∞·ª£ng response
    console.log(
      'üöÄ -> file: rpc-exception.filter.ts:40 -> RPCExceptionFilter -> response:',
      response
    );

    // Ki·ªÉm tra lo·∫°i ngo·∫°i l·ªá v√† x·ª≠ l√Ω t√πy theo nhu c·∫ßu c·ªßa b·∫°n
    if (exception instanceof RpcException) {
      console.log(
        'üöÄ -> file: rpc-exception.filter.ts:43 -> RPCExceptionFilter -> exception:',
        exception.getError()
      );
      const errorResponse = {
        statusCode: exception.getError(), // M√£ l·ªói t√πy theo ngo·∫°i l·ªá
        message: exception.getError() || 'Internal server error', // Th√¥ng ƒëi·ªáp l·ªói
      };
      // response(exception.getError()).send(errorResponse); // G·ª≠i ph·∫£n h·ªìi v·ªõi m√£ l·ªói v√† th√¥ng ƒëi·ªáp
    }

    // Tr·∫£ v·ªÅ m·ªôt Observable tr·ªëng ho·∫∑c gi√° tr·ªã kh√°c n·∫øu c·∫ßn
    return throwError(() => exception.getError()); // Ho·∫∑c return Observable.of({}); n·∫øu b·∫°n mu·ªën tr·∫£ v·ªÅ m·ªôt gi√° tr·ªã r·ªóng
  }
}
